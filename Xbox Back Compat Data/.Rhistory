# cor(as.logical(predicted_strength-1), as.logical(xb_test$isBCCompatible))
# plot(predicted_strength, xb_test$isBCCompatible)
# write.csv(submission, file = file.path(dataLocale, "dataWPrediction.csv"), row.names = FALSE)
print("...Done!")
# Stop parallel clusters
if(parallelize & !exists("cl")){
stopCluster(cl)
}
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$predict = as.character(dataOut$gameName) == predicted_strength[[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
# #Examining the correlation between predicted and actual values.
# cor(as.logical(predicted_strength-1), as.logical(xb_test$isBCCompatible))
# plot(predicted_strength, xb_test$isBCCompatible)
# write.csv(submission, file = file.path(dataLocale, "dataWPrediction.csv"), row.names = FALSE)
print("...Done!")
# Stop parallel clusters
if(parallelize & !exists("cl")){
stopCluster(cl)
}
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$predict = as.character(dataOut$gameName) == predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = as.character(dataOut$gameName) == predicted_strength[[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
# #Examining the correlation between predicted and actual values.
# cor(as.logical(predicted_strength-1), as.logical(xb_test$isBCCompatible))
# plot(predicted_strength, xb_test$isBCCompatible)
# write.csv(submission, file = file.path(dataLocale, "dataWPrediction.csv"), row.names = FALSE)
print("...Done!")
# Stop parallel clusters
if(parallelize & !exists("cl")){
stopCluster(cl)
}
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = as.character(dataOut$gameName) == predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = as.character(dataOut$gameName) == predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = as.character(dataOut$gameName) == predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = as.character(dataOut$gameName) == predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$isBCCompatible = predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$V1
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
stopCluster(cl)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$predicted = predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$V1
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(dataOut)
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),])
print(dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$gameName)
dataOut[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$predicted = predicted_strength[as.character(dataOut$gameName) == as.character(predicted_strength$V1),]$V2
predicted_strength$gameName = predicted_strength$V1
dataOut = merge(x = dataOriginal, y = predicted_strength, by = "CustomerId", all.x = TRUE)
dataOut = merge(x = dataOriginal, y = predicted_strength, by = "gameName", all.x = TRUE)
predicted_strength = dplyr::select(predicted_strength, gameName = V1, predicted = V2)
predicted_strength = as.data.frame(cbind(as.character(test_ids), as.logical(round(model_results$net.result - 1))))
predicted_strength = dplyr::select(predicted_strength, gameName = V1, predicted = V2)
dataOut = merge(x = dataOriginal, y = predicted_strength, by = "gameName", all.x = TRUE)
dataOut$predicted[dataOut$isBCCompatible == TRUE] = dataOut$isBCCompatible[dataOut$isBCCompatible == TRUE]
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
cor(xb_test$predicted_isBCCompatible, xb_test$isBCCompatible)
cor(xb_test$predicted_isBCCompatible, xb_test$isBCCompatible)
cor(xb_test$predicted_isBCCompatible, xb_test$isBCCompatible)
cor(xb_test$predicted_isBCCompatible, xb_test$isBCCompatible)
cor(as.logical(xb_test$predicted_isBCCompatible), as.logical(xb_test$isBCCompatible))
cor(as.logical(xb_test$predicted_isBCCompatible), as.logical(xb_test$isBCCompatible))
cor(as.logical(xb_test$predicted_isBCCompatible), as.logical(xb_test$isBCCompatible))
cor(as.logical(xb_test$predicted_isBCCompatible), as.logical(xb_test$isBCCompatible))
cor(as.logical(xb_test$predicted_isBCCompatible), as.logical(xb_test$isBCCompatible))
cor(as.logical(xb_test$predicted_isBCCompatible), as.logical(xb_test$isBCCompatible))
as.logical(xb_test$predicted_isBCCompatible)
predicted_isBCCompatible
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
dataOut$predicted_isBCCompatible
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
cor(as.logical(dataOut$predicted_isBCCompatible), as.logical(dataOut$isBCCompatible))
plot(dataOut$predicted_isBCCompatible, dataOut$isBCCompatible)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(dataOut)
dataOut(is.na(dataOut)) = FALSE
dataOut(is.na(dataOut$predicted_isBCCompatible))$predicted_isBCCompatible = FALSE
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
dataOut[is.na(dataOut$predicted_isBCCompatible)]$predicted_isBCCompatible = FALSE
dataOut[is.na(dataOut$predicted_isBCCompatible)]$predicted_isBCCompatible = FALSE
dataOut[is.na(dataOut$predicted_isBCCompatible),]$predicted_isBCCompatible = FALSE
View(dataOut)
?neuralnet
ncols(dataOut)
ncol(dataOut)
ncol(xb_train)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(dataOut)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
sapply(dataUltImputed,class)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
View(dataUlt)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(dataOut)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
data = data.matrix(data)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
?data.matrix
data = data.matrix(data)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
data = as.data.frame(data.matrix(data))
data = as.data.frame(data.matrix(data))
data = as.data.frame(data.matrix(data))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
?model.matrix
data = as.data.frame(~ . -gameName, model.matrix(data))
data = as.data.frame(model.matrix(~ . -gameName, data))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
data = as.data.frame(model.matrix(~ ., data))
data = as.data.frame(model.matrix(~ ., data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
data = as.data.frame(model.matrix(~ . -gameName, data))
summary(data)
data = as.data.frame(model.matrix(~ . -gameName -gameUrl -highresboxart, data))
data = as.data.frame(model.matrix(~ . -gameName -gameUrl -highresboxart, data))
data = as.data.frame(model.matrix(~ -gameName -gameUrl -highresboxart, data))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/CombineData.R', echo=TRUE)
data = nearZeroVar(data)
data = nearZeroVar(data)
data = nearZeroVar(data)
data = nearZeroVar(data)
data = nearZeroVar(data)
?nearZeroVar
data = nearZeroVar(data)
duplicated(data)
sapply(duplicated,duplicated)
sapply(duplicated,duplicated)
sapply(duplicated,duplicated)
sapply(duplicated,duplicated)
sapply(duplicated,duplicated)
sapply(duplicated,duplicated)
sapply(duplicated,duplicated)
sapply(data,duplicated)
sapply(data,duplicated)
data[sapply(data, is.numeric)] <- as.data.frame(lapply(data[sapply(data, is.numeric)], normalize))
sapply(data,duplicated)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
sapply(data,unique)
length(sapply(data,unique))
lapply(sapply(data,unique),length)
sapply(sapply(data,unique),length)
sapply(sapply(data,unique),length) == 1
data = data[sapply(sapply(data,unique),length) >= 1]
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
print(f)
?model.matrix
??model.matrix
?model.matrix
f <- as.formula(paste("isBCCompatible ~", paste(n[!n %in% "isBCCompatible"], collapse = " + ")))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
n <- names(xb_train)[names(xb_train) ~= '(Intercept)']
n <- names(xb_train)[names(xb_train) ~= '(Intercept)']
n <- names(xb_train)[names(xb_train) ~= '(Intercept)']
n <- names(xb_train)[names(xb_train) ~= '(Intercept)']
n <- names(xb_train)[names(xb_train) ~= '(Intercept)']
n <- names(xb_train)[names(xb_train) ~= '(Intercept)']
n <- names(xb_train)[names(xb_train) != '(Intercept)']
f <- as.formula(paste("isBCCompatible ~", paste(n[!n %in% "isBCCompatible"], collapse = " + ")))
print()
print(n)
f <- as.formula(paste("isBCCompatible ~", paste(n[!n %in% "isBCCompatible"], collapse = " + ")))
names(data) = make.names(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
names(data) = str_replace_all(data, "[[:punct:]]", " ")
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
names(data) = str_replace_all(data, "[^[:alnum:]]", "_")
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
data = as.data.frame(model.matrix(~ . -gameName -gameUrl -highresboxart, data))
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
data = as.data.frame(model.matrix(~ . -isBCCompatible -gameName -gameUrl -highresboxart, data))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
xb_test
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
View(data)
v
xb_train
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
str(xb_test)
summary(xb_test)
dim(xb_test)
dim(xb_train)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
print(data$isBCCompatible)
data$isBCCompatible = as.numeric(bcTemp) - 1
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
sapply(data,typeof)
data$releaseDate = as.double(data$releaseDate)
data$isBCCompatible = as.double(bcTemp) - 1
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
sapply(data, function(x) sum(is.na(x)))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
unique(names(xb_train),names(xb_test))
setdiff(names(xb_train),names(xb_test))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
dim(concrete_model$data)
dim(xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
model_results = compute(concrete_model, xb_test)
?compute
concrete_model
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
model_results = compute(concrete_model, as.data.frame(xb_test))
model_results = compute(concrete_model, as.data.frame(xb_test))
concrete_model = neuralnet(f,
hidden = 1, #Default number of hidden neurons.
data = xb_train)
model_results = compute(concrete_model, as.data.frame(xb_test))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
data = data[sapply(sapply(data,unique), length) > 1]
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
sapply(data,typeof)
data = as.data.frame(model.matrix(~ . -isBCCompatible -gameName -gameUrl -highresboxart, data))
View(data)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
sapply(data,typeof)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
data$isBCCompatible == 1 | data$usesRequiredPeripheral == 1 | data$isKinectRequired == 1
data$isBCCompatible == 1
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/MachineLearning.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
??naiveBayes
install.packages("naivebayes")
library(naiveBayes)
library(naivebayes)
concrete_model = naiveBayes(f,
hidden = 1, #Default number of hidden neurons.
data = xb_train)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
concrete_model = naive_bayes(f,
hidden = 1, #Default number of hidden neurons.
data = xb_train)
?naive_bayes
concrete_model = naive_bayes(formula = f,
hidden = 1, #Default number of hidden neurons.
data = xb_train)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
xb_test = VarDrop(xb_test, isBCCompatible)
?xb_test
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
?xb_test
View(xb_train)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
sapply(data,class)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
View(xb_test)
?concrete_model
concrete_model$tables
concrete_model$tables
concrete_model$tables
concrete_model$tables
concrete_model$tables
concrete_model
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
sapply(xb_train,class)
View(xb_test)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
setdiff(xb_test,concrete_model$apriori)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,xb_train)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
setdiff(xb_test,concrete_model$levels)
model_results = compute(concrete_model, as.data.frame(xb_test))
model_results = compute(concrete_model, as.data.frame(xb_test))
model_results = compute(concrete_model, as.data.frame(xb_test))
model_results = compute(concrete_model, as.data.frame(xb_test))
model_results = compute(concrete_model, as.data.frame(xb_test))
model_results = compute(concrete_model, as.data.frame(xb_test))
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
unique(data$isBCCompatible)
unique(xb_train$isBCCompatible)
xb_train$isBCCompatible
sapply(xb_train, function(x)all(is.na(x)))
sapply(xb_train, function(x)all(is.na(x))) == TRUE
sapply(xb_train, function(x)all(is.na(x)))
sapply(xb_train, function(x)all(is.na(x)))
sapply(xb_train, function(x)all(is.na(x)))
sapply(xb_train, function(x)all(is.na(x)))
sapply(xb_train, function(x)all(is.na(x)))
sapply(xb_train, function(x)all(is.na(x)))
concrete_model = glm(isBCCompatible ~ .,
data = xb_train)
concrete_model = glm(isBCCompatible ~ .,
data = xb_train)
xb_train[which(is.infinite(xb_train))]
xb_train[which(is.nan(xb_train))]
xb_train[which(is.nan(xb_train))]
xb_train[which(is.nan(xb_train))]
xb_train[which(is.nan(xb_train))]
xb_train[which(!is.finite(xb_train))]
xb_train = xb_train[which(!is.finite(xb_train))]
xb_train = xb_train[which(!is.finite(xb_train))]
xb_train = xb_train[which(!is.finite(xb_train))]
xb_train = xb_train[which(!is.finite(xb_train))]
xb_train = xb_train[which(!is.finite(xb_train)),]
xb_train = xb_train[which(!is.finite(xb_train)),]
concrete_model = naiveBayes(isBCCompatible ~ .,
data = xb_train)
source('~/Coding/Data Science/Xbox-One-Backwards-Compatability-Predictions/NaiveBayes.R', echo=TRUE)
View(xb_train)
xb_train$isBCCompatible
